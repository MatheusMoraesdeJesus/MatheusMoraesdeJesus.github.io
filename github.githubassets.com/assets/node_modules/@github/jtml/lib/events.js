import {
    AttributeTemplatePart
} from '@github/template-parts';
const eventListeners = new WeakMap();
class EventHandler {
    constructor(element, type) {
        this.element = element;
        this.type = type;
        this.element.addEventListener(this.type, this);
        eventListeners.get(this.element).set(this.type, this);
    }
    set(listener) {
        if (typeof listener == 'function') {
            this.handleEvent = listener.bind(this.element);
        } else if (typeof listener === 'object' && typeof listener.handleEvent === 'function') {
            this.handleEvent = listener.handleEvent.bind(listener);
        } else {
            this.element.removeEventListener(this.type, this);
            eventListeners.get(this.element).delete(this.type);
        }
    }
    static
    for (part) {
        if (!eventListeners.has(part.element))
            eventListeners.set(part.element, new Map());
        const type = part.attributeName.slice(2);
        const elementListeners = eventListeners.get(part.element);
        if (elementListeners.has(type))
            return elementListeners.get(type);
        return new EventHandler(part.element, type);
    }
}
export function processEvent(part, value) {
    if (part instanceof AttributeTemplatePart && part.attributeName.startsWith('on')) {
        EventHandler.for(part).set(value);
        part.element.removeAttributeNS(part.attributeNamespace, part.attributeName);
        return true;
    }
    return false;
}
//# sourceMappingURL=events.js.map