var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _parts;
export class NodeTemplatePart {
    constructor(node, expression) {
        this.expression = expression;
        _parts.set(this, void 0);
        __classPrivateFieldSet(this, _parts, [node]);
        node.textContent = '';
    }
    get value() {
        return __classPrivateFieldGet(this, _parts).map(node => node.textContent).join('');
    }
    set value(string) {
        this.replace(string);
    }
    get previousSibling() {
        return __classPrivateFieldGet(this, _parts)[0].previousSibling;
    }
    get nextSibling() {
        return __classPrivateFieldGet(this, _parts)[__classPrivateFieldGet(this, _parts).length - 1].nextSibling;
    }
    replace(...nodes) {
        const parts = nodes.map(node => {
            if (typeof node === 'string')
                return new Text(node);
            return node;
        });
        if (!parts.length)
            parts.push(new Text(''));
        __classPrivateFieldGet(this, _parts)[0].before(...parts);
        for (const part of __classPrivateFieldGet(this, _parts))
            part.remove();
        __classPrivateFieldSet(this, _parts, parts);
    }
}
_parts = new WeakMap();
//# sourceMappingURL=node-template-part.js.map