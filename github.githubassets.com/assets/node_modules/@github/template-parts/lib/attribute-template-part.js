var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _setter, _value;
export class AttributeTemplatePart {
    constructor(setter, expression) {
        this.expression = expression;
        _setter.set(this, void 0);
        _value.set(this, '');
        __classPrivateFieldSet(this, _setter, setter);
        __classPrivateFieldGet(this, _setter).updateParent('');
    }
    get attributeName() {
        return __classPrivateFieldGet(this, _setter).attr.name;
    }
    get attributeNamespace() {
        return __classPrivateFieldGet(this, _setter).attr.namespaceURI;
    }
    get value() {
        return __classPrivateFieldGet(this, _value);
    }
    set value(value) {
        __classPrivateFieldSet(this, _value, value || '');
        __classPrivateFieldGet(this, _setter).updateParent(value);
    }
    get element() {
        return __classPrivateFieldGet(this, _setter).element;
    }
    get booleanValue() {
        return __classPrivateFieldGet(this, _setter).booleanValue;
    }
    set booleanValue(value) {
        __classPrivateFieldGet(this, _setter).booleanValue = value;
    }
}
_setter = new WeakMap(), _value = new WeakMap();
export class AttributeValueSetter {
    constructor(element, attr) {
        this.element = element;
        this.attr = attr;
        this.partList = [];
    }
    get booleanValue() {
        return this.element.hasAttributeNS(this.attr.namespaceURI, this.attr.name);
    }
    set booleanValue(value) {
        if (this.partList.length !== 1) {
            throw new DOMException('Operation not supported', 'NotSupportedError');
        };
        this.partList[0].value = value ? '' : null;
    }
    append(part) {
        this.partList.push(part);
    }
    updateParent(partValue) {
        if (this.partList.length === 1 && partValue === null) {
            this.element.removeAttributeNS(this.attr.namespaceURI, this.attr.name);
        } else {
            const str = this.partList.map(s => (typeof s === 'string' ? s : s.value)).join('');
            this.element.setAttributeNS(this.attr.namespaceURI, this.attr.name, str);
        }
    }
}
//# sourceMappingURL=attribute-template-part.js.map